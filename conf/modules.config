/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

/////////////
// FILE QC //
/////////////

// FASTQC
if (!params.skip_qc && !params.skip_fastqc) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_TRIM:FASTQC' {
            ext.prefix = { "${meta.id}.raw" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/fastqc/pre_trim" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        if (!params.skip_trimming) {
            withName: '.*:FASTQC_NANOPLOT_POST_TRIM:FASTQC' {
                ext.prefix = { "${meta.id}.trimmed" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/qc/fastqc/post_trim" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            }
        }

        withName: '.*:FASTQC_NANOPLOT_POST_EXTRACT:FASTQC' {
            ext.prefix = { "${meta.id}.extracted" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/fastqc/post_extract" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
    }
}

// NANOPLOT
if (!params.skip_qc && !params.skip_nanoplot) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_TRIM:NANOPLOT' {
            ext.prefix = { "${meta.id}.raw" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/nanoplot/pre_trim/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        if (!params.skip_trimming) {
            withName: '.*:FASTQC_NANOPLOT_POST_TRIM:NANOPLOT' {
                ext.prefix = { "${meta.id}.trimmed" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/qc/nanoplot/post_trim/" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            }
        }

        withName: '.*:FASTQC_NANOPLOT_POST_EXTRACT:NANOPLOT' {
            ext.prefix = { "${meta.id}.extracted" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/nanoplot/post_extract/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
    }
}

// NANOCOMP
if (!params.skip_qc && !params.skip_fastq_nanocomp) {
    process {
        withName: '.*:NANOCOMP_FASTQ' {
            publishDir = [
                path: { "${params.outdir}/batch_qcs/nanocomp/fastq" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
        }
    }
}


// TOULLIGQC
if (!params.skip_qc && !params.skip_toulligqc) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_TRIM:TOULLIGQC' {
            ext.prefix = { "${meta.id}.raw_" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/toulligqc/pre_trim/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        if (!params.skip_trimming) {
            withName: '.*:FASTQC_NANOPLOT_POST_TRIM:TOULLIGQC' {
                ext.prefix = { "${meta.id}.trimmed_" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/qc/toulligqc/post_trim/" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            }
        }

        withName: '.*:FASTQC_NANOPLOT_POST_EXTRACT:TOULLIGQC' {
            ext.prefix = { "${meta.id}.extracted_" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/toulligqc/post_extract/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
    }
}

// SAMTOOLS
if (!params.skip_qc){

    process {
        withName:'.*:BAM_SORT_STATS_SAMTOOLS_CORRECTED:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.corrected" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/samtools/corrected" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName:'.*:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.dna" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/samtools/corrected" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

}


// READ COUNTS
if (!params.skip_qc) {

    process {
        withName:'.*:READ_COUNTS' {
            publishDir = [
                path: { "${params.outdir}/batch_qcs/read_counts" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

/////////////////////
// REFERENCE FILES //
/////////////////////

// PREPARE_REFERENCE_FILES
process {
    withName: '.*:PREPARE_REFERENCE_FILES:.*' {
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*:UCSC_GTFTOGENEPRED' {
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*:UCSC_GENEPREDTOBED' {
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*:GUNZIP_WHITELIST.*' {
        publishDir = [
            enabled: false
        ]
    }
}


//////////////////////
// FASTQ PROCESSING //
//////////////////////

// FASTQ CONCATENATION
process {
    withName: '.*:CAT_FASTQ' {
        publishDir = [
            enabled: false
        ]
    }
}

// PIGZ_UNCOMPRESS
process {
    withName: '.*:PIGZ_UNCOMPRESS.*' {
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*:GUNZIP_FASTQ.*' {
        publishDir = [
            enabled: false
        ]
    }
}

// SEQKIT SPLIT2

process {
    withName: SEQKIT_SPLIT2 {
    if (params.split_amount > 0){
        ext.args = "--by-size ${params.split_amount}"
        }
    publishDir = [
            enabled: false
        ]
    }
}

if (params.split_amount > 0) {
    process {
        withName: '.*:SPLIT_FILE_BC_FASTQ' {
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*:SPLIT_FILE_BC_CSV' {
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*:CAT_CAT_PREEXTRACT' {
            ext.prefix = { "${meta.id}_filtered.fastq" }
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*:CAT_CAT_BARCODE' {
            ext.prefix = { "${meta.id}.corrected_bc_umi.tsv" }
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*:PIGZ_COMPRESS' {
            publishDir = [
                enabled: false
            ]
        }
    }
}

// FASTQ TRIMMING
if (!params.skip_trimming) {

    if (params.split_amount > 0){
        process {
            withName: '.*:SPLIT_FILE' {
                publishDir = [
                    enabled: false
                ]
            }
        }


        process {
            withName: '.*:CAT_CAT' {
                publishDir = [
                    enabled: false
                ]
            }
        }
    }

    // CHOPPER
    process {
        withName: '.*:CHOPPER' {
            ext.prefix = { "${meta.id}_trimmed" }
            ext.args2 = {
                [
                    params.min_length ? "--minlength ${params.min_length}" : "",
                    params.min_q_score ? "--quality ${params.min_q_score}" : ""
                ].join(' ').trim()
            }
            publishDir = [
                enabled: false
            ]
        }
    }

    // NANOFILT
    if ( !params.skip_trimming ){
        process {
            withName:'.*:NANOFILT' {
                ext.args = {
                    [
                        params.min_length ? "--length ${params.min_length}" : "",
                        params.min_q_score ? "--quality ${params.min_q_score}" : ""
                    ].join(' ').trim()
                }
                publishDir = [
                    enabled: false
                ]
            }
        }
    }
}


///////////////////////
// BARCODE DETECTION //
///////////////////////

// FLEXIPLEX

// Flexiplex discovery
if ( params.split_amount > 0 ) {
    process {
        withName: '.*DEMULTIPLEX_FLEXIPLEX_DNA:FLEXIPLEX_DISCOVERY' {
            ext.args = {
                [
                    params.custom_flexiplex_barcode_dna ?: params.barcode_format == "10X_multiome" ?
                        "-x 'ACCGAGATCTACAC' -b '????????????????' -x 'CGCGTCTGTCGTCGGCAGCGTCAGATGTGTATAAGAGACAG' -f 8" :
                        "",
                ].join(' ').trim()
            }
            publishDir = [
                enabled = false
            ]
        }
    }
} else {
    process {
        withName: '.*DEMULTIPLEX_FLEXIPLEX_DNA:FLEXIPLEX_DISCOVERY' {
            ext.args = {
                [
                    params.custom_flexiplex_barcode_dna ?: params.barcode_format == "10X_multiome" ?
                        "-x 'ACCGAGATCTACAC' -b '????????????????' -x 'CGCGTCTGTCGTCGGCAGCGTCAGATGTGTATAAGAGACAG' -f 8" :
                        "",
                ].join(' ').trim()
            }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/flexiplex/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}


// Flexiplex assign
process {
    withName: '.*DEMULTIPLEX_FLEXIPLEX_DNA:FLEXIPLEX_ASSIGN' {
        ext.args = {
            [
                params.custom_flexiplex_barcode_dna ?: params.barcode_format == "10X_multiome" ?
                    "-x 'ACCGAGATCTACAC' -b '????????????????' -x 'CGCGTCTGTCGTCGGCAGCGTCAGATGTGTATAAGAGACAG' -f 8" :
                    "",
            ].join(' ').trim()
        }
        publishDir = [
            enabled: false
        ]
    }
}

// Flexiplex discovery
if ( params.split_amount > 0 ) {
    process {
        withName: '.*DEMULTIPLEX_FLEXIPLEX_CDNA:FLEXIPLEX_DISCOVERY' {
            ext.args = {
                [
                    params.custom_flexiplex_barcode_cdna ?: params.barcode_format == "10X_multiome" ?
                        "-d 10x3v3" :
                    params.barcode_format == "10x5v3" ?
                        "-x CTACACGACGCTCTTCCGATCT -b ???????????????? -u ?????????? -x TTTCTTATATGGG -f 8 -e 2" :
                        "-d 10x${params.barcode_format.minus('10X_')}",
                ].join(' ').trim()
            }
            publishDir = [
                enabled: false
            ]
        }
    }
} else {
    process {
        withName: '.*DEMULTIPLEX_FLEXIPLEX_CDNA:FLEXIPLEX_DISCOVERY' {
            ext.args = {
                [
                    params.custom_flexiplex_barcode_cdna ?: params.barcode_format == "10X_multiome" ?
                        "-d 10x3v3" :
                    params.barcode_format == "10x5v3" ?
                        "-x CTACACGACGCTCTTCCGATCT -b ???????????????? -u ?????????? -x TTTCTTATATGGG -f 8 -e 2" :
                        "-d 10x${params.barcode_format.minus('10X_')}",
                ].join(' ').trim()
            }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/flexiplex/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

// Flexiplex assign
process {
    withName: '.*DEMULTIPLEX_FLEXIPLEX_CDNA:FLEXIPLEX_ASSIGN' {
        ext.args = {
            [
                params.custom_flexiplex_barcode_cdna ?: params.barcode_format == "10X_multiome" ?
                    "-d 10x3v3" :
                params.barcode_format == "10x5v3" ?
                    "-x CTACACGACGCTCTTCCGATCT -b ???????????????? -u ?????????? -x TTTCTTATATGGG -f 8 -e 2" :
                    "-d 10x${params.barcode_format.minus('10X_')}",
            ].join(' ').trim()
        }
        publishDir = [
            enabled: false
        ]
    }
}

// Merge flexiplex barcode files
process {
    withName: '.*MERGE_BARCODES' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/flexiplex/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// Flexiplex filter
process {
    withName: '.*:FLEXIPLEX_FILTER' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/flexiplex/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// Flexiformatter
process {
    withName: '.*:FLEXIFORMATTER' {
        publishDir = [
            enabled: false
        ]
    }
}

// BLAZE
process {
    withName: '.*:BLAZE' {
        ext.args = {
            [
                params.barcode_format == "10X_multiome" ? "--kit-version 3v3" : "--kit-version ${params.barcode_format.minus('10X_')}"
            ].join(' ').trim()
        }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/blaze/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// PREEXTRACT_FASTQ
process {
    withName: '.*:PREEXTRACT_FASTQ' {
        ext.prefix = { params.split_amount <= 0 ? "${meta.id}" : "${reads}".toString().replace('.fastq', '') }
        ext.args = params.barcode_format == "10X_multiome" ? "-f 10X_3v3" : "-f ${params.barcode_format}"
        publishDir = [
            enabled: false
        ]
    }
}

// CORRECT_BARCODES
process {
    withName: '.*:CORRECT_BARCODES' {
        ext.prefix = { params.split_amount <= 0 ? "${meta.id}" : "${bc_info}".toString().replace('.extracted.putative_bc_umi.tsv', '') }
        publishDir = [
            enabled: false
        ]
    }
}

// TAG_BARCODES
process {
    withName: '.*PROCESS_LONGREAD_SCRNA_GENOME.*:TAG_BARCODES' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/genome/bam/barcode_tagged" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
process {
    withName: '.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:TAG_BARCODES' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/transcriptome/bam/barcode_tagged" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// SAMTOOLS_INDEX
process {
    withName:'.*PROCESS_LONGREAD_SCRNA_GENOME.*:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/genome/bam/barcode_tagged" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:SAMTOOLS_INDEX_TAGGED' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/transcriptome/bam/barcode_tagged" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// SAMTOOLS_FLAGSTAT
process {
    withName:'.*PROCESS_LONGREAD_SCRNA_GENOME.*:SAMTOOLS_FLAGSTAT_TAGGED' {
        ext.prefix = { "${meta.id}.genome.tagged" }
        publishDir = [
            enabled: false
        ]
    }
}
process {
    withName:'.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:SAMTOOLS_FLAGSTAT_TAGGED' {
        ext.prefix = { "${meta.id}.transcriptome.tagged" }
        publishDir = [
            enabled: false
        ]
    }
}


//////////////////////////
// ALIGN_LONGREADS_CNDA //
//////////////////////////

// MINIMAP2_INDEX
if (!params.skip_save_minimap2_index) {
    process {
        withName:'.*PROCESS_LONGREAD_SCRNA_GENOME.*:MINIMAP2_INDEX' {
            ext.args = {
                [
                    "-ax splice",
                    params.stranded == "forward" ? "-uf" : params.stranded == "reverse" ? "-ub" : "-un",
                    "-k${params.kmer_size}",
                    params.save_genome_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
                ].join(' ').trim()
            }
            publishDir = [
                path: { "${params.outdir}/references/genome/minimap_index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    process {
        withName:'.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:MINIMAP2_INDEX' {
            ext.args = {
                [
                    "-ax splice",
                    params.stranded == "forward" ? "-uf" : params.stranded == "reverse" ? "-ub" : "-un",
                    "-k${params.kmer_size}",
                    params.save_transcript_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
                ].join(' ').trim()
            }
            publishDir = [
                path: { "${params.outdir}/references/transcriptome/minimap_index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    process {
        withName:'.*ALIGN_DEDUPLICATE_DNA:MINIMAP2_INDEX' {
            ext.args = {
                [
                    "-ax map-ont",
                    params.save_transcript_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
                ].join(' ').trim()
            }
            publishDir = [
                path: { "${params.outdir}/references/dna/minimap_index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

// MINIMAP
process {
    withName:'.*PROCESS_LONGREAD_SCRNA_GENOME.*:MINIMAP2_ALIGN' {
        ext.args = {
            [
                "--MD -ax splice",
                params.stranded == "forward" ? "-uf" : params.stranded == "reverse" ? "-ub" : "-un",
                "-k${params.kmer_size}",
                params.save_genome_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
            ].join(' ').trim()
        }
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName:'.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:MINIMAP2_ALIGN' {
        ext.args = {
            [
                "--MD -ax map-ont --eqx -N 100",
                params.stranded == "forward" ? "-uf" : params.stranded == "reverse" ? "-ub" : "-un",
                "-k${params.kmer_size}",
                params.save_transcript_secondary_alignment == false ? "--secondary=no " : "--secondary=yes ",
            ].join(' ').trim()
        }
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName:'.*ALIGN_DEDUPLICATE_DNA:MINIMAP2_ALIGN' {
        ext.args = {
            [
                "-ax map-ont",
                params.save_transcript_secondary_alignment == false ? "--secondary=no " : "--secondary=yes ",
            ].join(' ').trim()
        }
        publishDir = [
            enabled: false
        ]
    }
}

// SAMTOOLS_VIEW
process {
    withName:'.*:SAMTOOLS_FILTER_MAPPED' {
        ext.args = "-b -F 4"
        ext.prefix = { "${meta.id}.mapped_only" }
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName:'.*:SAMTOOLS_FILTER_DEDUP' {
        ext.args = "-b -F 0x0400"
        ext.prefix = { "${meta.id}.dedup_filtered" }
        publishDir = [
            enabled: false
        ]
    }
}

// SAMTOOLS_SORT
process {
    withName:'.*PROCESS_LONGREAD_SCRNA_GENOME.*:ALIGN_LONGREADS:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.genome.sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/genome/bam/original" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
process {
    withName:'.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:ALIGN_LONGREADS:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.transcript.sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/transcriptome/bam/original" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*PROCESS_LONGREAD_SCRNA_GENOME.*:BAM_SORT_STATS_SAMTOOLS_FILTERED:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.genome_mapped_only.sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/genome/bam/mapped_only" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:BAM_SORT_STATS_SAMTOOLS_FILTERED:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.transcript_mapped_only.sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/transcriptome/bam/mapped_only" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// SAMTOOLS_INDEX
process {
    withName:'.*PROCESS_LONGREAD_SCRNA_GENOME.*:ALIGN_LONGREADS:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/genome/bam/original" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:ALIGN_LONGREADS:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/transcriptome/bam/original" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*PROCESS_LONGREAD_SCRNA_GENOME.*:ALIGN_LONGREADS:BAM_SORT_STATS_SAMTOOLS_FILTERED:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/genome/bam/mapped_only" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:ALIGN_LONGREADS:BAM_SORT_STATS_SAMTOOLS_FILTERED:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/transcriptome/bam/mapped_only" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

if (!params.skip_qc) {

    // SAMTOOLS FLAGSTAT/STAT/IDXSTAT
    process {
        withName:'.*PROCESS_LONGREAD_SCRNA_GENOME.*:ALIGN_LONGREADS:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.genome.minimap" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/genome/qc/samtools/minimap" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName:'.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:ALIGN_LONGREADS:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.transcriptome.minimap" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/transcriptome/qc/samtools/minimap" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName:'.*PROCESS_LONGREAD_SCRNA_GENOME.*:ALIGN_LONGREADS:BAM_SORT_STATS_SAMTOOLS_FILTERED:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.genome.mapped_only" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/genome/qc/samtools/mapped_only" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName:'.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:ALIGN_LONGREADS:BAM_SORT_STATS_SAMTOOLS_FILTERED:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.transcriptome.mapped_only" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/transcriptome/qc/samtools/mapped_only" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    // RSEQC
    if (!params.skip_rseqc) {
        process {
            withName:'.*PROCESS_LONGREAD_SCRNA_GENOME.*:RSEQC_READDISTRIBUTION' {
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/genome/qc/rseqc" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }

        process {
            withName:'.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:RSEQC_READDISTRIBUTION' {
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/transcriptome/qc/rseqc" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    // NANOCOMP
    if (!params.skip_bam_nanocomp) {
        process {
            withName: '.*PROCESS_LONGREAD_SCRNA_GENOME.*:ALIGN_LONGREADS:NANOCOMP' {
                ext.prefix = { "${meta.id}.genome" }
                publishDir = [
                    path: { "${params.outdir}/batch_qcs/genome/nanocomp/bam" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
            }
        }

        process {
            withName: '.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:ALIGN_LONGREADS:NANOCOMP' {
                ext.prefix = { "${meta.id}.transcriptome" }
                publishDir = [
                    path: { "${params.outdir}/batch_qcs/transcriptome/nanocomp/bam" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
            }
        }
    }
}

/////////////////////
// ALIGN DEDUP DNA //
/////////////////////

process {}

process {
    withName: '.*ALIGN_DEDUPLICATE_DNA:PICARD_MARKDUPLICATES' {
        ext.prefix = { "${meta.id}.dna.dedup" }
        ext.args = {
            [
                "--BARCODE_TAG 'CB'",
                "--TAG_DUPLICATE_SET_MEMBERS true",
                "--TAGGING_POLICY 'All'"
            ].join(' ').trim()
        }
        publishDir = [
            enabled: false
        ]
    }
}

if (!params.skip_dedup) {
    process {
        withName: '.*ALIGN_DEDUPLICATE_DNA:BAM_SORT_STATS_SAMTOOLS' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/bam/dedup" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
} else {
    process {
        withName: '.*ALIGN_DEDUPLICATE_DNA:BAM_SORT_STATS_SAMTOOLS' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/bam/mapped_only" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

process {
    withName: '.*ALIGN_DEDUPLICATE_DNA:NANOCOMP' {
        publishDir = [
                path: { "${params.outdir}/batch_qcs/dna/nanocomp/bam" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}


////////////////////
// BAM PROCESSING //
////////////////////


// SAMTOOLS SORT

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_CORRECTED:SAMTOOLS_SORT' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/corrected" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

if (!params.skip_dedup) {
    process {
        withName:'.*:BAM_SORT_STATS_SAMTOOLS_MERGED:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.merged.sorted" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/bam/dedup" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (!params.skip_dedup) {
    process {
        withName: '.*ALIGN_DEDUPLICATE_DNA:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/bam/dedup" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
} else {
    process {
        withName: '.*ALIGN_DEDUPLICATE_DNA:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/bam/mapped_only" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}


// SAMTOOLS_INDEX
process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_CORRECTED:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/corrected" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

if (!params.skip_dedup) {
    process {
        withName: '.*ALIGN_DEDUPLICATE_DNA:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/bam/dedup" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
} else {
    process {
        withName: '.*ALIGN_DEDUPLICATE_DNA:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/bam/mapped_only" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

/////////////////////////////
// UMI DEDUPLICATION SPLIT //
/////////////////////////////

    process {
        withName: '.*:GROUP_TRANSCRIPTS' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName:'.*:SAMTOOLS_VIEW_SPLIT' {
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName:'.*:DEDUP_UMIS:BAM_SORT_STATS_SAMTOOLS.*' {
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:UMITOOLS_DEDUP' {
            ext.prefix = { "${meta.id}.transcriptome.umi_dedup" }
            ext.args = {
                [
                    '--per-cell',
                    params.demux_tool == "flexiplex" ? "--extract-umi-method tag --umi-tag UR --cell-tag CB" : ""
                ].join(' ').trim()
            }
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:PICARD_MARKDUPLICATES' {
            ext.prefix = { "${meta.id}.transcriptome.dedup" }
            ext.args = {
                [
                    "--BARCODE_TAG 'CB'",
                    "--TAG_DUPLICATE_SET_MEMBERS true",
                    "--TAGGING_POLICY 'All'"
                ].join(' ').trim()
            }
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*:PROCESS_LONGREAD_SCRNA_TRANSCRIPT:DEDUP_UMIS:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*:SAMTOOLS_INDEX_DEDUP' {
            ext.prefix = { "${meta.id}.transcriptome.dedup.sorted" }
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*DEDUP_UMIS:SAMTOOLS_MERGE' {
            ext.prefix = { "${meta.id}.transcriptome.dedup" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/transcriptome/bam/dedup" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName: '.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*DEDUP_UMIS:SAMTOOLS_INDEX_MERGED' {
            ext.prefix = { "${meta.id}.transcriptome.dedup" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/transcriptome/bam/dedup" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName: '.*PROCESS_LONGREAD_SCRNA_TRANSCRIPT.*DEDUP_UMIS:BAM_STATS_SAMTOOLS.*' {
            ext.prefix = { "${meta.id}.transcriptome.${params.dedup_tool}_dedup" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/transcriptome/qc/samtools/dedup" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

if (!params.skip_dedup){
    process {
        withName: '.*PROCESS_LONGREAD_SCRNA_GENOME.*:UMITOOLS_DEDUP' {
            ext.prefix = { "${meta.id}.genome.umi_dedup" }
            ext.args = {
                [
                    '--per-cell',
                    params.demux_tool == "flexiplex" ? "--extract-umi-method tag --umi-tag UR --cell-tag CB" : ""
                ].join(' ').trim()
            }
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*PROCESS_LONGREAD_SCRNA_GENOME.*:PICARD_MARKDUPLICATES' {
            ext.prefix = { "${meta.id}.genome.dedup" }
            ext.args = {
                [
                    "--BARCODE_TAG 'CB'",
                    "--TAG_DUPLICATE_SET_MEMBERS true",
                    "--TAGGING_POLICY 'All'"
                ].join(' ').trim()
            }
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName:'.*PROCESS_LONGREAD_SCRNA_GENOME.*:SAMTOOLS_INDEX_DEDUP' {
            ext.prefix = { "${meta.id}.genome.dedup.sorted" }
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*:PROCESS_LONGREAD_SCRNA_GENOME:DEDUP_UMIS:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
            ext.args = "--write-index"
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*PROCESS_LONGREAD_SCRNA_GENOME.*DEDUP_UMIS:SAMTOOLS_MERGE' {
            ext.prefix = { "${meta.id}.genome.dedup" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/genome/bam/dedup" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName: '.*PROCESS_LONGREAD_SCRNA_GENOME.*DEDUP_UMIS:SAMTOOLS_INDEX_MERGED' {
            ext.prefix = { "${meta.id}.genome.dedup" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/genome/bam/dedup" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName: '.*PROCESS_LONGREAD_SCRNA_GENOME.*DEDUP_UMIS:BAM_STATS_SAMTOOLS.*' {
            ext.prefix = { "${meta.id}.genome.${params.dedup_tool}_dedup" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/genome/qc/samtools/dedup" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

}

/////////////////////////////
// QUANTIFY SCRNA ISOQUANT //
/////////////////////////////

process {
    withName: '.*:QUANTIFY_SCRNA_ISOQUANT:SPLIT_FASTA' {
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*:QUANTIFY_SCRNA_ISOQUANT:SAMTOOLS_FAIDX_SPLIT' {
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*:QUANTIFY_SCRNA_ISOQUANT:SPLIT_GTF' {
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*:BAMTOOLS_SPLIT' {
        ext.args = {
            [
                "-reference"
            ].join(' ').trim()
        }
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*:SAMTOOLS_INDEX_SPLIT' {
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*:ISOQUANT' {
        ext.args = {
            [
                "--complete_genedb",
                params.stranded == "forward" ? "--stranded forward" : params.stranded == "reverse" ? "--stranded reverse" : "--stranded none",
                params.retain_introns ? "--gene_quantification all " : "--gene_quantification unique_inconsistent ",
                params.retain_introns ? "--transcript_quantification all " : "--transcript_quantification unique_only ",
                "--splice_correction_strategy default_ont ",
                "--model_construction_strategy sensitive_ont ",
                "--data_type nanopore"
            ].join(' ').trim()
        }
        publishDir = [
            path: { "${params.outdir}/${meta.sample_name}/genome/isoquant/output/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName: '.*:MERGE_MTX_GENE' {
        ext.prefix = { "${meta.id}.gene" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/genome/isoquant/feature_bc_mtx" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName: '.*:MERGE_MTX_TRANSCRIPT' {
        ext.prefix = { "${meta.id}.transcript" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/genome/isoquant/feature_bc_mtx" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

if (!params.skip_qc && !params.skip_seurat) {
    process {
        withName: '.*QUANTIFY_SCRNA_ISOQUANT:QC_SCRNA_GENE:SEURAT' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/genome/qc/seurat_isoquant/gene" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName: '.*QUANTIFY_SCRNA_ISOQUANT:QC_SCRNA_TRANSCRIPT:SEURAT' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/genome/qc/seurat_isoquant/transcript" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName: '.*:QUANTIFY_SCRNA_ISOQUANT:QC_SCRNA_GENE:COMBINE_SEURAT_STATS' {
            ext.args = "-o isoquant_gene.tsv -f gene"
            publishDir = [
                enabled: false
            ]
        }
    }

    process {
        withName: '.*:QUANTIFY_SCRNA_ISOQUANT:QC_SCRNA_TRANSCRIPT:COMBINE_SEURAT_STATS' {
            ext.args = "-o isoquant_transcript.tsv -f transcript"
            publishDir = [
                enabled: false
            ]
        }
    }
}

/////////////////////////////
// QUANTIFY SCRNA OARFISH  //
/////////////////////////////

process {
    withName:'.*:QUANTIFY_SCRNA_OARFISH:SAMTOOLS_SORT' {
        ext.args = {
            [
                "-t CB",
                "--write-index"
            ].join(' ').trim()
        }
        ext.prefix = { "${meta.id}.bc_sort" }
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*:OARFISH' {
        ext.args = {
            [
                "--single-cell --model-coverage --filter-group no-filters"
            ].join(' ').trim()
        }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/transcriptome/oarfish" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

if (!params.skip_qc && !params.skip_seurat) {
    process {
        withName: '.*QUANTIFY_SCRNA_OARFISH:QC_SCRNA:SEURAT' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/transcriptome/qc/seurat_oarfish/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName: '.*:QUANTIFY_SCRNA_OARFISH:QC_SCRNA:COMBINE_SEURAT_STATS' {
            ext.args = "-o oarfish_transcript.tsv -f transcript"
            publishDir = [
                enabled: false
            ]
        }
    }
}

/////////////
// MULTIQC //
/////////////

if (!params.skip_qc && !params.skip_multiqc) {
    process {
        withName: '.*:MULTIQC_FINALQC' {
            ext.args = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
            publishDir = [
                path: { "${params.outdir}/batch_qcs/multiqc/final_qc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName: '.*:MULTIQC_RAWQC' {
            ext.args = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
            publishDir = [
                path: { "${params.outdir}/batch_qcs/multiqc/raw_qc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
